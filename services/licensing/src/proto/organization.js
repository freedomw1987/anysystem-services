"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: organization.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrganizationServiceClient = exports.OrganizationServiceService = exports.CreateOrganizationResponse = exports.CreateOrganizationRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
var grpc_js_1 = require("@grpc/grpc-js");
exports.protobufPackage = "organization";
function createBaseCreateOrganizationRequest() {
    return { alias: "", name: "", phone: "", email: "", address: "", country: "" };
}
exports.CreateOrganizationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.alias !== "") {
            writer.uint32(10).string(message.alias);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.phone !== "") {
            writer.uint32(26).string(message.phone);
        }
        if (message.email !== "") {
            writer.uint32(34).string(message.email);
        }
        if (message.address !== "") {
            writer.uint32(42).string(message.address);
        }
        if (message.country !== "") {
            writer.uint32(50).string(message.country);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateOrganizationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.alias = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.country = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            alias: isSet(object.alias) ? globalThis.String(object.alias) : "",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            country: isSet(object.country) ? globalThis.String(object.country) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.alias !== "") {
            obj.alias = message.alias;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.country !== "") {
            obj.country = message.country;
        }
        return obj;
    },
    create: function (base) {
        return exports.CreateOrganizationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseCreateOrganizationRequest();
        message.alias = (_a = object.alias) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.phone = (_c = object.phone) !== null && _c !== void 0 ? _c : "";
        message.email = (_d = object.email) !== null && _d !== void 0 ? _d : "";
        message.address = (_e = object.address) !== null && _e !== void 0 ? _e : "";
        message.country = (_f = object.country) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
function createBaseCreateOrganizationResponse() {
    return { id: "" };
}
exports.CreateOrganizationResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateOrganizationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.id !== "") {
            obj.id = message.id;
        }
        return obj;
    },
    create: function (base) {
        return exports.CreateOrganizationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseCreateOrganizationResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
exports.OrganizationServiceService = {
    createOrganization: {
        path: "/organization.OrganizationService/CreateOrganization",
        requestStream: false,
        responseStream: false,
        requestSerialize: function (value) {
            return Buffer.from(exports.CreateOrganizationRequest.encode(value).finish());
        },
        requestDeserialize: function (value) { return exports.CreateOrganizationRequest.decode(value); },
        responseSerialize: function (value) {
            return Buffer.from(exports.CreateOrganizationResponse.encode(value).finish());
        },
        responseDeserialize: function (value) { return exports.CreateOrganizationResponse.decode(value); },
    },
};
exports.OrganizationServiceClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.OrganizationServiceService, "organization.OrganizationService");
function isSet(value) {
    return value !== null && value !== undefined;
}
