generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  phone       String       @unique
  status      UserStatus   @default(REGISTERED)
  accesslogs  Log[]
  userOnRoles UserOnRole[]
  token       String?
  expiresAt   DateTime?

  @@index([phone], map: "User_phone_idx")
  @@index([email], map: "User_email_idx")
  @@index([status], map: "User_status_idx")
}

model UserOnRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([userId, roleId])
}

model Role {
  id               String             @id @default(uuid())
  name             String
  UserOnRole       UserOnRole[]
  PermissionOnRole PermissionOnRole[]
}

model PermissionOnRole {
  id           String     @id @default(uuid())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String
}

model Permission {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  PermissionOnRole PermissionOnRole[]

  @@unique([name])
}

model Log {
  id        Int      @id @default(autoincrement())
  userId    String
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Log_userId_fkey")
}

enum UserStatus {
  REGISTERED
  ACTIVE
  INACTIVE
}
