// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: license.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "license";

export enum LicenseName {
  STANDARD = 0,
  PREMIUM = 1,
  UNRECOGNIZED = -1,
}

export function licenseNameFromJSON(object: any): LicenseName {
  switch (object) {
    case 0:
    case "STANDARD":
      return LicenseName.STANDARD;
    case 1:
    case "PREMIUM":
      return LicenseName.PREMIUM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LicenseName.UNRECOGNIZED;
  }
}

export function licenseNameToJSON(object: LicenseName): string {
  switch (object) {
    case LicenseName.STANDARD:
      return "STANDARD";
    case LicenseName.PREMIUM:
      return "PREMIUM";
    case LicenseName.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum LicenseStatus {
  INACTIVE = 0,
  ACTIVE = 1,
  EXPIRED = 2,
  UNRECOGNIZED = -1,
}

export function licenseStatusFromJSON(object: any): LicenseStatus {
  switch (object) {
    case 0:
    case "INACTIVE":
      return LicenseStatus.INACTIVE;
    case 1:
    case "ACTIVE":
      return LicenseStatus.ACTIVE;
    case 2:
    case "EXPIRED":
      return LicenseStatus.EXPIRED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LicenseStatus.UNRECOGNIZED;
  }
}

export function licenseStatusToJSON(object: LicenseStatus): string {
  switch (object) {
    case LicenseStatus.INACTIVE:
      return "INACTIVE";
    case LicenseStatus.ACTIVE:
      return "ACTIVE";
    case LicenseStatus.EXPIRED:
      return "EXPIRED";
    case LicenseStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateLicenseRequest {
  organizationId: string;
  name: LicenseName;
  startedAt: Date | undefined;
  expiredAt: Date | undefined;
}

export interface CreateLicenseResponse {
  id: string;
  status: LicenseStatus;
}

export interface CheckLicenseRequest {
  organizationId: string;
  license: string;
}

export interface CheckLicenseResponse {
  id: string;
  status: LicenseStatus;
  startedAt: Date | undefined;
  expiredAt: Date | undefined;
}

function createBaseCreateLicenseRequest(): CreateLicenseRequest {
  return { organizationId: "", name: 0, startedAt: undefined, expiredAt: undefined };
}

export const CreateLicenseRequest: MessageFns<CreateLicenseRequest> = {
  encode(message: CreateLicenseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.organizationId !== "") {
      writer.uint32(10).string(message.organizationId);
    }
    if (message.name !== 0) {
      writer.uint32(16).int32(message.name);
    }
    if (message.startedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(26).fork()).join();
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLicenseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLicenseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.organizationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.name = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLicenseRequest {
    return {
      organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
      name: isSet(object.name) ? licenseNameFromJSON(object.name) : 0,
      startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
    };
  },

  toJSON(message: CreateLicenseRequest): unknown {
    const obj: any = {};
    if (message.organizationId !== "") {
      obj.organizationId = message.organizationId;
    }
    if (message.name !== 0) {
      obj.name = licenseNameToJSON(message.name);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = message.startedAt.toISOString();
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLicenseRequest>, I>>(base?: I): CreateLicenseRequest {
    return CreateLicenseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLicenseRequest>, I>>(object: I): CreateLicenseRequest {
    const message = createBaseCreateLicenseRequest();
    message.organizationId = object.organizationId ?? "";
    message.name = object.name ?? 0;
    message.startedAt = object.startedAt ?? undefined;
    message.expiredAt = object.expiredAt ?? undefined;
    return message;
  },
};

function createBaseCreateLicenseResponse(): CreateLicenseResponse {
  return { id: "", status: 0 };
}

export const CreateLicenseResponse: MessageFns<CreateLicenseResponse> = {
  encode(message: CreateLicenseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateLicenseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateLicenseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateLicenseResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? licenseStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CreateLicenseResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== 0) {
      obj.status = licenseStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateLicenseResponse>, I>>(base?: I): CreateLicenseResponse {
    return CreateLicenseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateLicenseResponse>, I>>(object: I): CreateLicenseResponse {
    const message = createBaseCreateLicenseResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCheckLicenseRequest(): CheckLicenseRequest {
  return { organizationId: "", license: "" };
}

export const CheckLicenseRequest: MessageFns<CheckLicenseRequest> = {
  encode(message: CheckLicenseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.organizationId !== "") {
      writer.uint32(10).string(message.organizationId);
    }
    if (message.license !== "") {
      writer.uint32(18).string(message.license);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckLicenseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckLicenseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.organizationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.license = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckLicenseRequest {
    return {
      organizationId: isSet(object.organizationId) ? globalThis.String(object.organizationId) : "",
      license: isSet(object.license) ? globalThis.String(object.license) : "",
    };
  },

  toJSON(message: CheckLicenseRequest): unknown {
    const obj: any = {};
    if (message.organizationId !== "") {
      obj.organizationId = message.organizationId;
    }
    if (message.license !== "") {
      obj.license = message.license;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckLicenseRequest>, I>>(base?: I): CheckLicenseRequest {
    return CheckLicenseRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckLicenseRequest>, I>>(object: I): CheckLicenseRequest {
    const message = createBaseCheckLicenseRequest();
    message.organizationId = object.organizationId ?? "";
    message.license = object.license ?? "";
    return message;
  },
};

function createBaseCheckLicenseResponse(): CheckLicenseResponse {
  return { id: "", status: 0, startedAt: undefined, expiredAt: undefined };
}

export const CheckLicenseResponse: MessageFns<CheckLicenseResponse> = {
  encode(message: CheckLicenseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.startedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(26).fork()).join();
    }
    if (message.expiredAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiredAt), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckLicenseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckLicenseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.startedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expiredAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckLicenseResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? licenseStatusFromJSON(object.status) : 0,
      startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
      expiredAt: isSet(object.expiredAt) ? fromJsonTimestamp(object.expiredAt) : undefined,
    };
  },

  toJSON(message: CheckLicenseResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== 0) {
      obj.status = licenseStatusToJSON(message.status);
    }
    if (message.startedAt !== undefined) {
      obj.startedAt = message.startedAt.toISOString();
    }
    if (message.expiredAt !== undefined) {
      obj.expiredAt = message.expiredAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckLicenseResponse>, I>>(base?: I): CheckLicenseResponse {
    return CheckLicenseResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckLicenseResponse>, I>>(object: I): CheckLicenseResponse {
    const message = createBaseCheckLicenseResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? 0;
    message.startedAt = object.startedAt ?? undefined;
    message.expiredAt = object.expiredAt ?? undefined;
    return message;
  },
};

export type LicenseServiceService = typeof LicenseServiceService;
export const LicenseServiceService = {
  createLicense: {
    path: "/license.LicenseService/CreateLicense",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateLicenseRequest) => Buffer.from(CreateLicenseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateLicenseRequest.decode(value),
    responseSerialize: (value: CreateLicenseResponse) => Buffer.from(CreateLicenseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateLicenseResponse.decode(value),
  },
  checkLicense: {
    path: "/license.LicenseService/CheckLicense",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckLicenseRequest) => Buffer.from(CheckLicenseRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckLicenseRequest.decode(value),
    responseSerialize: (value: CheckLicenseResponse) => Buffer.from(CheckLicenseResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckLicenseResponse.decode(value),
  },
} as const;

export interface LicenseServiceServer extends UntypedServiceImplementation {
  createLicense: handleUnaryCall<CreateLicenseRequest, CreateLicenseResponse>;
  checkLicense: handleUnaryCall<CheckLicenseRequest, CheckLicenseResponse>;
}

export interface LicenseServiceClient extends Client {
  createLicense(
    request: CreateLicenseRequest,
    callback: (error: ServiceError | null, response: CreateLicenseResponse) => void,
  ): ClientUnaryCall;
  createLicense(
    request: CreateLicenseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateLicenseResponse) => void,
  ): ClientUnaryCall;
  createLicense(
    request: CreateLicenseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateLicenseResponse) => void,
  ): ClientUnaryCall;
  checkLicense(
    request: CheckLicenseRequest,
    callback: (error: ServiceError | null, response: CheckLicenseResponse) => void,
  ): ClientUnaryCall;
  checkLicense(
    request: CheckLicenseRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckLicenseResponse) => void,
  ): ClientUnaryCall;
  checkLicense(
    request: CheckLicenseRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckLicenseResponse) => void,
  ): ClientUnaryCall;
}

export const LicenseServiceClient = makeGenericClientConstructor(
  LicenseServiceService,
  "license.LicenseService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LicenseServiceClient;
  service: typeof LicenseServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
